asyncapi: '2.6.0'
id: 'gotcha:websocket-api'
defaultContentType: application/json

info:
  title: Gotcha WebSocket API
  version: '1.0.0'
  description: |
    이 문서는 Gotcha 게임 플랫폼의 실시간 WebSocket(STOMP) 통신 명세서입니다.
    SockJS를 통해 WebSocket 연결을 시도합니다.

    | 주체             | 동작       | 사용하는 STOMP 함수       | 경로 예시              |
    |------------------|------------|---------------------------|-------------------------|
    | 클라이언트 → 서버 | 메시지 보냄 | `stompClient.send()`      | `/pub/**`      |
    | 서버 → 클라이언트 | 메시지 보냄 | `stompClient.subscribe()` | `/sub/**`         |

    ⭐본 서비스에서 사용하는 메시지 전송 경로는 총 4개로 구성됩니다. 로직에 따른 구독 경로를 달리하지 않고, dto로 로직을 구분합니다.

    [prefix 있는 채널들]
    - /pub/room/{roomId} : 대기방 관련 로직들 (대기방 내 채팅 포함)
    - /pub/chat/** : 채팅 관련 로직들 (전체 채팅 및 개인 채팅)
    - /pub/game/** : 게임 관련 로직들 
    
    [절대 경로 채널]
    - user/queue/errors : 에러 처리 채널

servers:
  production:
    url: http://43.202.159.231:8080/ws-connect
    protocol: ws
    description: >
      SockJS 기반 STOMP WebSocket 연결을 지원합니다.
      기본적으로 WebSocket(ws) 사용, 실패 시 HTTP long-polling 등으로 fallback 됩니다.



      핸드쉐이크 시, 반드시 HTTP 헤더에
      Authorization: Bearer {JWT 토큰}
      를 포함해야 합니다.


channels:

  /user/queue/errors:
    description: |
      사용자별 에러 메시지를 수신하는 WebSocket 구독 채널입니다.
      서버에서 발생한 예외 정보를 이 채널로 전달합니다.
    subscribe:
      message:
        name: ExceptionResponse
        summary: 에러 응답 메시지
        payload:
          $ref: '#/components/schemas/ExceptionRes'


  /pub/room/create:
    description: 클라이언트가 새 방을 생성 요청하는 채널
    publish:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/CreateRoomRequest'

  /sub/room/create/info:
    description: 클라이언트가 방 생성 응답을 받는 용도
    subscribe:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/RedisResponse_RoomMetadata'

  /pub/room/{roomId}:
    description: |
      클라이언트가 대기방 내에서 발생 가능한 로직 요청을 전송하는 채널입니다.

      [사용 가능한 이벤트 타입]
      - CHAT: 대기방 채팅
      - READY: 준비 상태 변경
      - JOIN: 방 참가
      - EXIT: 방 퇴장
      - START: 게임 시작

      `eventType` 값에 따라 content의 의미는 다르게 해석됩니다.
    parameters:
      roomId:
        description: 대상 대기방의 고유 ID
        schema:
          type: string
    publish:
      message:
        name: RoomEventRequest
        summary: 대기방 내 요청 이벤트 전송
        contentType: application/json
        payload:
          $ref: '#/components/schemas/RoomReq'

  /sub/room/event/{roomId}:
    description: |
      클라이언트가 대기방 내에서 발생 가능한 로직 처리 결과를 응답 받는 채널입니다.
    parameters:
      roomId:
        description: 대기방 고유 ID
        schema:
          type: string
    subscribe:
      message:
        oneOf:
          - name: ChatEvent
            summary: CHAT 이벤트 - 채팅 메시지 수신
            payload:
              $ref: '#/components/schemas/RedisResponse_RoomChat'

          - name: JoinEvent
            summary: JOIN 이벤트 - 대기방 내 기존 유저 목록 수신
            payload:
              $ref: '#/components/schemas/RedisResponse_RoomJoin'

          - name: ReadyEvent
            summary: READY 이벤트 - 준비 상태 변경


          - name: ExitEvent
            summary: EXIT 이벤트 - 퇴장 정보

          - name: StartEvent
            summary: START 이벤트 - 게임 시작 알림

  /pub/chat/all:
    description: 클라이언트가 전체 채팅 메시지를 전송하는 채널
    publish:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/RedisReq_AllChat'

  /sub/chat/all:
    description: 클라이언트가 전체 채팅 메시지를 수신하는 채널
    subscribe:
      message:
        name: AllChatMessage
        summary: 전체 채팅 메시지 수신
        payload:
          $ref: '#/components/schemas/RedisRes_AllChat'

  /pub/chat/private:
    description: 클라이언트가 특정 사용자에게 개인 채팅(귓속말) 메시지를 전송하는 채널입니다. `receiverUuid`에 수신 대상 사용자의 UUID를 지정하여 메시지를 전송합니다
    publish:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/RedisReq_PrivateChat'

  /sub/chat/private/{receiverId}:
    description: 개인 채팅 메시지를 수신하는 구독 채널입니다.
    parameters:
      receiverId:
        description: ID of the message receiver
        schema:
          type: string
    subscribe:
      message:
        name: PrivateMessage
        summary: 개인 채팅 메시지 수신
        payload:
          $ref: '#/components/schemas/RedisRes_PrivateChat'

components:
  schemas:
    ExceptionRes:
      type: object
      description: API 예외 응답 구조
      properties:
        code:
          type: string
          description: 에러 코드
        status:
          type: integer
          format: int32
          description: HTTP 상태 코드
        message:
          type: string
          description: 에러 메시지
        fields:
          type: object
          description: 필드별 상세 오류 메시지 (있을 경우)
          additionalProperties:
            type: string
      required:
        - code
        - status
        - message

    CreateRoomRequest:
      type: object
      required:
        - title
        - maxUser
        - hasPassword
        - aimode
        - gameMode
        - roundCount
      properties:
        title:
          type: string
          description: 제목 (필수 입력)

        maxUser:
          type: integer
          description: 최대 인원수 (필수 입력)

        hasPassword:
          type: boolean
          description: 비밀번호 사용 여부

        password:
          type: string
          description: 문자열이 숫자 4자리로만 구성되어 있어야 한다

        aimode:
          type: string
          enum: [BASIC, ADVANCED]
          description: 인공지능 난이도 (필수)

        gameMode:
          type: string
          enum: [TRICK_MYOMYO, LULU_ART_EXAM]
          description: 묘묘 - 2인 / 루루 - 1인 게임 모드

        roundCount:
          type: integer
          minimum: 1
          maximum: 5
          description: 라운드 수 (1~5 사이)

    RoomReq:
      type: object
      required:
        - eventType
      properties:
        eventType:
          type: string
          enum: [CHAT, READY, JOIN, EXIT, START]
          description: |
            클라이언트가 수행하고자 하는 이벤트의 종류입니다.
        content:
          type: string
          description: |
            이벤트에 따라 의미가 달라지는 콘텐츠입니다.
            - CHAT: 채팅 메시지
            - READY: 사용자의 준비 상태
            - JOIN : 방 참가
            - EXIT : 방 퇴장
            - START : 게임 시작

    RedisResponse_RoomMetadata:
      type: object
      description: 방 생성/요청 응답용 Redis 메시지 (RoomMetadata 포함)
      properties:
        userId:
          type: string
          description: 메시지를 보낸 사용자 UUID
        topic:
          type: string
          description: Redis로 발행된 채널명
        payload:
          $ref: '#/components/schemas/RoomMetadata'

    RoomMetadata:
      type: object
      properties:
        id:
          type: string
          description: 방 ID
        title:
          type: string
          description: 방 제목
        owner:
          type: string
          description: 방장 닉네임
        hasPassword:
          type: boolean
          description: 비밀번호 사용 여부
        password:
          type: string
          description: 비밀번호 (빈 문자열일 수 있음)
        max:
          type: integer
          description: 최대 인원 수
        min:
          type: integer
          description: 최소 인원 수
        aiLevel:
          type: string
          enum: [BASIC, ADVANCED]
          description: AI 난이도
        gameMode:
          type: string
          enum: [TRICK_MYOMYO, LULU_ART_EXAM]
          description: 게임 모드
        ownerUuid:
          type: string
          description: |
            이 방을 생성한 사용자의 UUID입니다.  
            클라이언트는 해당 값을 통해 수신된 방 정보가 본인이 생성한 것인지 식별할 수 있습니다.

    RedisResponse_RoomChat:
      type: object
      properties:
        userId:
          type: string
        topic:
          type: string
        payload:
          type: object
          properties:
            eventType:
              type: string
              enum: [CHAT]
            eventAt:
              type: string
              format: date-time
            data:
              $ref: '#/components/schemas/RoomChatMessage'

    RedisResponse_RoomJoin:
      type: object
      properties:
        userId:
          type: string
        topic:
          type: string
        payload:
          type: object
          properties:
            eventType:
              type: string
              enum: [JOIN]
            eventAt:
              type: string
              format: date-time
            data:
              type: array
              items:
                $ref: '#/components/schemas/RoomUserInfo'

    AllChatMessage:
      type: object
      properties:
        nickname:
          type: string
        content:
          type: string
        chatType:
          type: string
          enum: [ALL]
        sentAt:
          type: string
          format: date-time

    PrivateChatMessage:
      type: object
      properties:
        nickname:
          type: string
        content:
          type: string
        chatType:
          type: string
          enum: [PRIVATE]
        sentAt:
          type: string
          format: date-time

    RoomChatMessage:
      type: object
      properties:
        nickname:
          type: string
        content:
          type: string
        chatType:
          type: string
          enum: [ROOM]
        sentAt:
          type: string
          format: date-time

    RoomUserInfo:
      type: object
      properties:
        userUuid:
          type: string
        nickname:
          type: string
        ready:
          type: boolean

    RedisReq_PrivateChat:
      type: object
      description: |
        채팅 메시지 전송 요청 객체입니다.
      properties:
        receiverUuid:
          type: string
          nullable: true
          description: |
            - 개인 채팅 시, `receiverUuid'는 필수입니다.
        content:
          type: string
          description: 메시지 내용
      required:
        - content

    RedisReq_AllChat:
      type: object
      description: |
        채팅 메시지 전송 요청 객체입니다.
      properties:
        content:
          type: string
          description: 메시지 내용
      required:
        - content

    RedisRes_AllChat:
      type: object
      description: |
        - 전체 채팅 메시지를 포함하는 Redis 전송 구조
        - 응답 시 ChatType은 ALL, ROOM, PRIVATE중 하나로 전송됩니다.
      properties:
        userId:
          type: string
          nullable: true
          description: null (전체 채팅이므로 사용자 구분 없음)
        topic:
          type: string
          description: Redis로 발행된 전체 채팅 채널명
        payload:
          $ref: '#/components/schemas/AllChatMessage'

    RedisRes_PrivateChat:
      type: object
      description: 특정 사용자에게 전송되는 개인 채팅 메시지 응답 구조입니다.
      properties:
        userId:
          type: string
          description: 수신 대상 사용자의 UUID입니다.
        topic:
          type: string
          description: Redis로 발행된 개인 채팅 채널명 (`/sub/chat/private/{receiverUuid}`)
        payload:
          $ref: '#/components/schemas/PrivateChatMessage'
