asyncapi: '2.6.0'
id: 'urn:gotcha:websocket-api'
defaultContentType: application/json

info:
  title: Gotcha WebSocket API
  version: '1.0.0'
  description: |
    이 문서는 Gotcha 게임 플랫폼의 실시간 WebSocket(STOMP) 통신 명세서입니다.
    SockJS를 통해 WebSocket 연결을 시도합니다.

    | 주체             | 동작       | 사용하는 STOMP 함수       | 경로 예시              |
    |------------------|------------|---------------------------|-------------------------|
    | 클라이언트 → 서버 | 메시지 보냄 | `stompClient.send()`      | `/pub/**`      |
    | 서버 → 클라이언트 | 메시지 보냄 | `stompClient.subscribe()` | `/sub/**`         |

    ⭐본 서비스에서 사용하는 채널 경로는 총 4개로 구성됩니다.

    [prefix 있는 채널들]
    - room : 대기방 관련 로직들 (대기방 내 채팅 포함)
    - chat : 채팅 관련 로직들 (전체 채팅 및 개인 채팅)
    - game : 게임 관련 로직들 
    
    [절대 경로 채널]
    - user/queue/errors : 에러 처리 채널
  
  

  contact:
    name: Gotcha Dev Team
    email: gotcha@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  production:
    url: http://43.202.159.231:8080/ws-connect
    protocol: ws
    description: >
      SockJS 기반 STOMP WebSocket 연결을 지원합니다.
      기본적으로 WebSocket(ws) 사용, 실패 시 HTTP long-polling 등으로 fallback 됩니다.

channels:
  /pub/room/create/:
    description: 클라이언트가 새 방을 생성 요청하는 채널
    publish:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/CreateRoomRequest'

  /sub/room/create/info:
    description: 클라이언트가 방 생성 응답을 받는 용도
    subscribe:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/RedisResponse'

  /pub/chat/all/:
    description: 클라이언트가 새 방을 생성 요청하는 채널
    publish:
      message:
        headers:
          type: object
          properties: {}
        payload:
          $ref: '#/components/schemas/CreateRoomRequest'


components:
  schemas:
    CreateRoomRequest:
      type: object
      required:
        - title
        - maxUser
        - hasPassword
        - aimode
        - gameMode
        - roundCount
      properties:
        title:
          type: string
          description: 제목 (필수 입력)

        maxUser:
          type: integer
          description: 최대 인원수 (필수 입력)

        hasPassword:
          type: boolean
          description: 비밀번호 사용 여부

        password:
          type: string
          description: 문자열이 숫자 4자리로만 구성되어 있어야 한다

        aimode:
          type: string
          enum: [BASIC, ADVANCED]
          description: 인공지능 난이도 (필수)

        gameMode:
          type: string
          enum: [TRICK_MYOMYO, LULU_ART_EXAM]
          description: 묘묘 - 2인 / 루루 - 1인 게임 모드

        roundCount:
          type: integer
          minimum: 1
          maximum: 5
          description: 라운드 수 (1~5 사이)

    RedisResponse:
      type: object
      properties:
        userId:
          type: string
          description: 사용자 고유 UUID
        topic:
          type: string
          description: Redis로 발행된 채널명
        payload:
          $ref: '#/components/schemas/RoomMetadata'

    RoomMetadata:
      type: object
      properties:
        id:
          type: string
          description: 방 ID
        title:
          type: string
          description: 방 제목
        owner:
          type: string
          description: 방장 닉네임
        hasPassword:
          type: boolean
          description: 비밀번호 사용 여부
        password:
          type: string
          description: 비밀번호 (빈 문자열일 수 있음)
        max:
          type: integer
          description: 최대 인원 수
        min:
          type: integer
          description: 최소 인원 수
        aiLevel:
          type: string
          enum: [BASIC, ADVANCED]
          description: AI 난이도
        gameMode:
          type: string
          enum: [TRICK_MYOMYO, LULU_ART_EXAM]
          description: 게임 모드
        ownerUuid:
          type: string
          description: |
            이 방을 생성한 사용자의 UUID입니다.  
            클라이언트는 해당 값을 통해 수신된 방 정보가 본인이 생성한 것인지 식별할 수 있습니다.

